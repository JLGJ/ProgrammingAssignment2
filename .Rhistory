getwd()
q()
dir()
x <-4
x
class(x)
x <-c(4,TRUE)
class(x)
x
x <- c(1,3,5)
y <- c(3,2,10)
cbind(x,y)
x <- list(2,"a","b",TRUE)
x[[1]]
class(x[[1]])
x <-1:4
y<-2:3
x+y
class(x+y)
x
y
x<-c(17,14,4,5,13,12,10)
x
x[x>4]<-10
x
x<-c(17,14,4,5,13,12,10)
x[x>10]<-4
x
x<-c(17,14,4,5,13,12,10)
x[x >= 10] <- 4
x
x<-c(17,14,4,5,13,12,10)
x[x > 10] == 4
x<-c(17,14,4,5,13,12,10)
pwd
wd
dir
cd
cwd
read.csv("quiz1_data/quiz1_data.csv")
read.csv("quiz1_data/hw1_data.csv")
data <- read.csv("quiz1_data/hw1_data.csv")
data <- read.csv("quiz1_data/hw1_data.csv",nrows = 2 )
data
data <- read.csv("quiz1_data/hw1_data.csv",nrows = -2)
data
data <- read.csv("quiz1_data/hw1_data.csv")
dtaa
data
data[1]
bad <- is.na(data[1])
bad
count.lines(bad)
mean(data[1])
ozone <- data[1]
ozone[!bad]
mean(ozone[!bad])
bad
data
data2 = data[Ozone>31,Temp>90]
nrow(data)
max(data[1])
dim(data)
names(data)
summary(data)
data("Ozone">32)
data$Ozone
x = data$Ozone>31
x
which(data$Ozone>31)
data.which(data$Ozone>31)
data[which(data$Ozone>31)]
data[which(data$Ozone>31),]
x <- data[which(data$Ozone>31),]
y <- data[which(data$Ozone>31),which(data$Temp>90),]
y <- x[which(data$Temp>90),]
y
summary(y)
x
y <- x[which(data$Temp>90),]
y
z <- data[which(data$Month ==5),]
z
z <- data[which(data$Month ==6),]
summary(z)
data[1]
data[data[1]>10]
data[1]>10
data+data[1]>10
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
x <- 5+7
x
y <- x-3
y
c(1.1,9,3.14)
z <-c(1.1,9,3.14)
?c
z
c(z,555)
c(z,555,z)
z*2+100
my_sqrt <- sqrt(c)
my_sqrt <- sqrt(z)
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
add2 <- function(x,y){
x+y
}
add2(3,5)
above10 <- function(x) {
use <- x >10
x[use]
}
above <- function(x,n) {
use <- x>n
x[use]
}
x <- 1:20
above(x,12)
above <- function(x,n = 10) {
use <- x>n
x[use]
}
above(x)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(y,removeNA=TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm=removeNA)
}
means
}
columnmean(airquality)
columnmean(airquality, FALSE)
packageVersion("swirl")
library(swirl)
ls
ls()
rm(list=ls())
swirl()
swirl()
getwd()
ls()
x<- 9
ls()
list.files()
?list.files
args(list.files)
wd()
!getwd
?getwd()
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("myTest.R")
file.info("mytest.R")
?file
?file.rename
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
?file.path
file.path("folder1","folder2")
?dir.create
getwd()
dir.create(file.path('testdir2','testdir3'), recursive = TRUE)
setwd(old.dir)
unlink('testdir',recursive=TRUE)
1:20
pi:10
15:1
?:
?':'
seq(1:20)
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length = 30)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect <1
tf
num_vect >=6
my_char <- c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name <- c(my_char,"John")
my_name
paste(my_name, collapse=" ")
paste("hello","world",sep=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("x","y","z"),sep-"")
paste(1:3,c("x","y","z"),sep="")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS, 1:4, sep = "-")
quit
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 ==7
6<7
10<=10
5!=7
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5>8 || 6!= 8 && 4 >3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints >5
which(ints>7)
any(ints)
any(ints<0)
all(ints>0)
library(swirl)
swirl()
Sys.date()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function()
boring_function
submit()
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11,num = 5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(stdev,c(1.4, 3.6, 7.9, 8.8))
evaluate(median,c(1.4, 3.6, 7.9, 8.8))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, 6)
evaluate(function(x){x[1]}, c(8,4,0)
)
evaluate(function(x){x[length(x)]}, c(8,4,0)
)
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram("blah blah blah")
submit()
mad_libs(place = "NYC",adjective = "moronic",noun = "election")
submit()
"I" p "love" p "R"
?
?
)
help
info()
skip()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
as.list(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vector <- sapply(flags,class)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lappy(flag_shapes,range())
lapply(flag_shapes,range
)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
?numeric
?matrix
m1 <- matrix(1:4,2,2)
m1
source("cachematrix.R")
setwd Week2
setwd("Week2")
dir()
setwd("../Week3")
dir()
setwd("Program*")
setwd("ProgrammingAssignment2")
dir()
source("cachematrix.R")
m2 <- makeCacheMatrix(m1)
solve(m1)
cacheSolve(m2)
